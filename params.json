{"name":"Jxlint","tagline":"Framework for doing static analysis in Java","body":"jxlint\r\n======\r\n\r\n[![Build status](https://travis-ci.org/selesse/jxlint.png)](https://travis-ci.org/selesse/jxlint)\r\n\r\n- [Changelog](CHANGELOG.md)\r\n\r\njxlint is a Java framework for performing static analysis. You create your\r\ncustom validation logic in Java, specify which files to perform this\r\nvalidation on, and add some documentation. The following \"boring\" stuff is\r\ntaken care of for you:\r\n\r\n    usage: jxlint [flags] <directory>\r\n     -h,--help                     Usage information, help message.\r\n     -v,--version                  Output version information.\r\n     -p,--profile                  Measure time every rule takes to complete.\r\n     -l,--list                     Lists lint rules with a short, summary\r\n                                   explanation.\r\n     -b,--web <port>               Run in the background, as a website.\r\n                                   (default port: 8380)\r\n     -r,--rules                    Prints a Markdown dump of the program's\r\n                                   rules.\r\n     -s,--show <RULE[s]>           Lists a verbose rule explanation.\r\n     -c,--check <RULE[s]>          Only check for these rules.\r\n     -d,--disable <RULE[s]>        Disable the list of rules.\r\n     -e,--enable <RULE[s]>         Enable the list of rules.\r\n     -y,--category <CATEGORY[s]>   Run all rules of a certain category.\r\n     -w,--nowarn                   Only check for errors; ignore warnings.\r\n     -Wall,--Wall                  Check all warnings, including those off by\r\n                                   default.\r\n     -Werror,--Werror              Treat all warnings as errors.\r\n     -q,--quiet                    Don't output any progress or reports.\r\n     -t,--html <filename>          Create an HTML report.\r\n     -x,--xml <filename>           Create an XML (!!) report.\r\n\r\n    <RULE[s]> should be comma separated, without spaces.\r\n    Exit Status:\r\n    0                     Success\r\n    1                     Failed\r\n    2                     Command line error\r\n\r\nMotivation\r\n----------\r\n\r\nThe goal of this framework is to provide an easy, intuitive way to perform\r\nfile validation. A user specifies a set of \"rules\" (i.e. validations) that\r\nshould be executed against a directory. Rules contain three major pieces of\r\ninformation: which files to validate, what the actual validation logic is, and\r\ndocumentation explaining its purpose.\r\n\r\nAnother goal is to have an architecture that encouraged rules to be\r\nself-contained. Anybody interested in verifying, adding, or removing existing\r\nrules should be able to do so quickly (i.e. everything is located where you'd\r\nexpect), and efficiently (i.e. adding new rules is intuitive and simple,\r\nrequiring little overhead). Additionally, adding tests to validate rules\r\nshould be straightforward.\r\n\r\n### Potential Users\r\n\r\n* If you are working with a framework that relies on XML for various parts of\r\n  the system and you'd like to verify that certain configurations are correct\r\n  before running the system, you might want to use this framework.\r\n\r\n* If you are trying to create a lint/static analysis tool, you might want\r\n  to use this framework so you don't have to reinvent the wheel. Various\r\n  components are already implemented for you. See the\r\n  [architecture](doc/architecture.md) for more details.\r\n\r\nRequirements\r\n------------\r\n\r\n[Gradle](http://gradle.org) is required to build the code. If Gradle is not\r\nalready installed, you can use the wrapper to install it for you.\r\n\r\nThe required libraries/dependencies can be found in\r\n[the Gradle build file](build.gradle).\r\n\r\nQuick Start\r\n-----------\r\n\r\n1. Specify `com.selesse:jxlint:1.7.0` as a Maven dependency.\r\n2. Make customizations:\r\n\r\n  Create all your rules. It's recommended to put all the rules in one directory,\r\n  as can be seen in the [sample implementations](src/test/java/com/selesse/jxlint/samplerules).\r\n\r\n  ```java\r\n  public class XmlEncodingRule extends LintRule {\r\n      public XmlEncodingRule () {\r\n          super(\"XML encoding specified\", \"Encoding of the XML should be specified.\",\r\n                  \"The XML encoding should be specified. For example, <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>.\",\r\n                  Severity.WARNING, Category.LINT, false);\r\n      }\r\n\r\n      @Override\r\n      public List<File> getFilesToValidate() {\r\n          return FileUtils.allFilesWithExtension(getSourceDirectory(), \"xml\");\r\n      }\r\n\r\n      @Override\r\n      public List<LintError> getLintErrors(File file) {\r\n          List<LintError> lintErrorList = Lists.newArrayList();\r\n          try {\r\n              DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n              DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n              documentBuilder.setErrorHandler(null); // silence the DOM error handler\r\n              Document document = documentBuilder.parse(file);\r\n\r\n              document.getDocumentElement().normalize();\r\n\r\n              if (Strings.isNullOrEmpty(document.getXmlEncoding())) {\r\n                  lintErrorList.add(LintError.with(this, file).\r\n                      addMessage(\"Encoding wasn't specified\").create());\r\n              }\r\n          }\r\n          catch (Exception e) {\r\n              lintErrorList.add(LintError.with(this, file).\r\n                  addMessage(\"Error checking rule, could not parse XML\").\r\n                  addException(e).create());\r\n          }\r\n\r\n          return lintErrorList;\r\n      }\r\n  }\r\n  ```\r\n\r\n  Add (at least) 1 positive and 1 negative test case. A (recommended) version\r\n  of such a tester can be found [here](src/test/java/com/selesse/jxlint/AbstractPassFailFileTest.java).\r\n  See the Javadoc for instructions on how to set this up. Extending this class leads to\r\n  [the following positive + negative test case](src/test/java/com/selesse/jxlint/samplerulestest/xml/XmlEncodingTest.java):\r\n\r\n  ```java\r\n  public class XmlEncodingTest extends AbstractPassFailFileXmlFileTest {\r\n      public XmlEncodingTest() {\r\n          super(new XmlEncodingRule());\r\n      }\r\n  }\r\n  ```\r\n\r\n  Set up the container by adding all your custom-defined rules.\r\n\r\n  ```java\r\n  public class MyXmlLintRulesImpl extends AbstractLintRules {\r\n      @Override\r\n      public void initializeLintRules() {\r\n          // Example rule saying that XML must be valid\r\n          lintRules.add(new ValidXmlRule());\r\n\r\n          // Example rule saying that duplicate attribute tags within XML are bad\r\n          lintRules.add(new UniqueAttributeRule());\r\n\r\n          // Example (disabled-by-default) rules\r\n          lintRules.add(new XmlVersionRule());\r\n          lintRules.add(new XmlEncodingRule());\r\n      }\r\n  }\r\n  ```\r\n\r\n  In your application's Main class:\r\n\r\n  ```java\r\n  public class Main {\r\n      public static void main(String[] args) {\r\n          Jxlint jxlint = new Jxlint(new MyXmlLintRulesImpl(), new MyProgramSettings());\r\n          jxlint.parseArgumentsAndDispatch(args);\r\n      }\r\n  }\r\n  ```\r\n\r\n3. Build your application.\r\n\r\nBuilding the Code\r\n-----------------\r\n\r\nTo build the code, run `gradle`. This will create a jxlint jar. If you do\r\nnot have gradle installed, type `gradlew`.\r\n\r\nExamples\r\n--------\r\n\r\nSample implementations can be found [here](src/test/java/com/selesse/jxlint/samplerules).\r\n\r\nVersioning\r\n----------\r\n\r\nThis project follows [Semantic Versioning](http://semver.org/) as much as\r\npossible.\r\n\r\nLicense\r\n-------\r\n\r\nThis software is licensed under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}